<diagram program="umletino" version="15.1"><zoom_level>6</zoom_level><element><id>UMLClass</id><coordinates><x>180</x><y>132</y><w>126</w><h>66</h></coordinates><panel_attributes>Client
--
-id: Long 
-username: String
-password: String

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>390</x><y>132</y><w>120</w><h>306</h></coordinates><panel_attributes>Game
--
-whitePlayer: Client
-blackPlayer: Client

-whitePlayerCounter: int = 0
-blackPlayerCounter: int = 0
-field: Color[][]
-size: field
-moves: List&lt;Move&gt;
-state: State

--
&lt;&lt;Constructors&gt;&gt;
+Game()
+Game(Color[][] field)
+Game(List&lt;Move&gt; moves) throws \
	InvalidMoveException

&lt;&lt;ForControllers&gt;&gt;
+getMoves(): List&lt;Move&gt;
+getField(): Color[][]
+addMove(Move) 
        throws InvalidMoveException 
+start() : void throws 
	

&lt;&lt;Main checks&gt;&gt;
-checkMove(Move): Boolean 
       throws InvalidMoveException
-finishGame(): void

...
TODO: implement


</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>570</x><y>132</y><w>84</w><h>102</h></coordinates><panel_attributes>Move
--
-x: int
-y: int
-game: Game
-color: Color
-pass: Boolean = false

--
&lt;&lt;Constructors&gt;&gt;
+Move(x, y, pass)
+Move()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>504</x><y>156</y><w>78</w><h>24</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes><additional_attributes>10;10;110;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>414</x><y>48</y><w>60</w><h>42</h></coordinates><panel_attributes>&lt;&lt;Enumeration&gt;&gt;
Color
{WHITE, BLACK}</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>552</x><y>42</y><w>114</w><h>42</h></coordinates><panel_attributes>&lt;&lt;Enumeration&gt;&gt;
State
{CREATED, STARTED, FINISHED}</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>300</x><y>156</y><w>102</w><h>24</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=2
m2=*</panel_attributes><additional_attributes>150;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>444</x><y>84</y><w>18</w><h>60</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;80;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>444</x><y>84</y><w>180</w><h>60</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>280;80;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>606</x><y>78</y><w>18</w><h>66</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;90;10;10</additional_attributes></element><element><id>UMLNote</id><coordinates><x>96</x><y>222</y><w>210</w><h>210</h></coordinates><panel_attributes>Note on Game module

How the game class will be used?
Firstly, when the game is created, its state is created
To start it, the controller may call start() method

The controller will hold the game object
When player makes a move, Move object is created
and passed into  addMove(Move) method

the Move must be checked and if the move is not 
going well with the rules, exception will be returned

if the 2 moves are passes, then the game must be finished
then based on the field, the points are counted according 
to the rules

controller then takes the values of counters and uses
them to say who was winner

Later the finished game is stored inside of the database and 
its moves will be used with another instance of Game object
to recreate the game</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>564</x><y>294</y><w>108</w><h>84</h></coordinates><panel_attributes>ConsoleRoom
--
-game: Game
--
&lt;&lt;Goal&gt;&gt;
To make a simple console which takes user input
as move, processes it and gives output
of whether the move is wrong or not


</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>696</x><y>294</y><w>132</w><h>84</h></coordinates><panel_attributes>&lt;&lt;Tests&gt;&gt;
GameTests
--
&lt;&lt;Todo&gt;&gt;
Implement tests for simple moves
and more complex rules,
for counting points both territory and captures
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>504</x><y>318</y><w>72</w><h>18</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>100;10;10;10</additional_attributes></element><element><id>UMLNote</id><coordinates><x>96</x><y>450</y><w>210</w><h>174</h></coordinates><panel_attributes>Note Special requirements
The class MUST HAVE
+addMove(Move)
+getMoves(): List&lt;Move&gt;
+start()
+getters for each field

and listed constructors, that will be used to recreate game 
based on moves or given field

The rest is up to you, but do it according to high cohension

Make tests for:
- counting points
- checking invalid moves
- checking different states 

Also look for lombok and try to use it</panel_attributes><additional_attributes></additional_attributes></element></diagram>